/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Authorization } from "./Authorization";
import { AuthorizationCountArgs } from "./AuthorizationCountArgs";
import { AuthorizationFindManyArgs } from "./AuthorizationFindManyArgs";
import { AuthorizationFindUniqueArgs } from "./AuthorizationFindUniqueArgs";
import { CreateAuthorizationArgs } from "./CreateAuthorizationArgs";
import { UpdateAuthorizationArgs } from "./UpdateAuthorizationArgs";
import { DeleteAuthorizationArgs } from "./DeleteAuthorizationArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { Customer } from "../../customer/base/Customer";
import { AuthorizationService } from "../authorization.service";
@graphql.Resolver(() => Authorization)
export class AuthorizationResolverBase {
  constructor(protected readonly service: AuthorizationService) {}

  async _authorizationsMeta(
    @graphql.Args() args: AuthorizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Authorization])
  async authorizations(
    @graphql.Args() args: AuthorizationFindManyArgs
  ): Promise<Authorization[]> {
    return this.service.authorizations(args);
  }

  @graphql.Query(() => Authorization, { nullable: true })
  async authorization(
    @graphql.Args() args: AuthorizationFindUniqueArgs
  ): Promise<Authorization | null> {
    const result = await this.service.authorization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Authorization)
  async createAuthorization(
    @graphql.Args() args: CreateAuthorizationArgs
  ): Promise<Authorization> {
    return await this.service.createAuthorization({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Authorization)
  async updateAuthorization(
    @graphql.Args() args: UpdateAuthorizationArgs
  ): Promise<Authorization | null> {
    try {
      return await this.service.updateAuthorization({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Authorization)
  async deleteAuthorization(
    @graphql.Args() args: DeleteAuthorizationArgs
  ): Promise<Authorization | null> {
    try {
      return await this.service.deleteAuthorization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  async findTransactions(
    @graphql.Parent() parent: Authorization,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Authorization
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
