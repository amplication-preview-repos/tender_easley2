/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Authorization as PrismaAuthorization,
  Transaction as PrismaTransaction,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class AuthorizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthorizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authorization.count(args);
  }

  async authorizations<T extends Prisma.AuthorizationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorizationFindManyArgs>
  ): Promise<PrismaAuthorization[]> {
    return this.prisma.authorization.findMany<Prisma.AuthorizationFindManyArgs>(
      args
    );
  }
  async authorization<T extends Prisma.AuthorizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorizationFindUniqueArgs>
  ): Promise<PrismaAuthorization | null> {
    return this.prisma.authorization.findUnique(args);
  }
  async createAuthorization<T extends Prisma.AuthorizationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorizationCreateArgs>
  ): Promise<PrismaAuthorization> {
    return this.prisma.authorization.create<T>(args);
  }
  async updateAuthorization<T extends Prisma.AuthorizationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorizationUpdateArgs>
  ): Promise<PrismaAuthorization> {
    return this.prisma.authorization.update<T>(args);
  }
  async deleteAuthorization<T extends Prisma.AuthorizationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorizationDeleteArgs>
  ): Promise<PrismaAuthorization> {
    return this.prisma.authorization.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.authorization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.authorization
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
