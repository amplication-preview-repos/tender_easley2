/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreditCheck } from "./CreditCheck";
import { CreditCheckCountArgs } from "./CreditCheckCountArgs";
import { CreditCheckFindManyArgs } from "./CreditCheckFindManyArgs";
import { CreditCheckFindUniqueArgs } from "./CreditCheckFindUniqueArgs";
import { CreateCreditCheckArgs } from "./CreateCreditCheckArgs";
import { UpdateCreditCheckArgs } from "./UpdateCreditCheckArgs";
import { DeleteCreditCheckArgs } from "./DeleteCreditCheckArgs";
import { Customer } from "../../customer/base/Customer";
import { CreditCheckService } from "../creditCheck.service";
@graphql.Resolver(() => CreditCheck)
export class CreditCheckResolverBase {
  constructor(protected readonly service: CreditCheckService) {}

  async _creditChecksMeta(
    @graphql.Args() args: CreditCheckCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CreditCheck])
  async creditChecks(
    @graphql.Args() args: CreditCheckFindManyArgs
  ): Promise<CreditCheck[]> {
    return this.service.creditChecks(args);
  }

  @graphql.Query(() => CreditCheck, { nullable: true })
  async creditCheck(
    @graphql.Args() args: CreditCheckFindUniqueArgs
  ): Promise<CreditCheck | null> {
    const result = await this.service.creditCheck(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CreditCheck)
  async createCreditCheck(
    @graphql.Args() args: CreateCreditCheckArgs
  ): Promise<CreditCheck> {
    return await this.service.createCreditCheck({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CreditCheck)
  async updateCreditCheck(
    @graphql.Args() args: UpdateCreditCheckArgs
  ): Promise<CreditCheck | null> {
    try {
      return await this.service.updateCreditCheck({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreditCheck)
  async deleteCreditCheck(
    @graphql.Args() args: DeleteCreditCheckArgs
  ): Promise<CreditCheck | null> {
    try {
      return await this.service.deleteCreditCheck(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: CreditCheck
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
