/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditCheckService } from "../creditCheck.service";
import { CreditCheckCreateInput } from "./CreditCheckCreateInput";
import { CreditCheck } from "./CreditCheck";
import { CreditCheckFindManyArgs } from "./CreditCheckFindManyArgs";
import { CreditCheckWhereUniqueInput } from "./CreditCheckWhereUniqueInput";
import { CreditCheckUpdateInput } from "./CreditCheckUpdateInput";

export class CreditCheckControllerBase {
  constructor(protected readonly service: CreditCheckService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreditCheck })
  async createCreditCheck(
    @common.Body() data: CreditCheckCreateInput
  ): Promise<CreditCheck> {
    return await this.service.createCreditCheck({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        checkDate: true,
        createdAt: true,
        creditLimit: true,
        creditScore: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreditCheck] })
  @ApiNestedQuery(CreditCheckFindManyArgs)
  async creditChecks(@common.Req() request: Request): Promise<CreditCheck[]> {
    const args = plainToClass(CreditCheckFindManyArgs, request.query);
    return this.service.creditChecks({
      ...args,
      select: {
        checkDate: true,
        createdAt: true,
        creditLimit: true,
        creditScore: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreditCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditCheck(
    @common.Param() params: CreditCheckWhereUniqueInput
  ): Promise<CreditCheck | null> {
    const result = await this.service.creditCheck({
      where: params,
      select: {
        checkDate: true,
        createdAt: true,
        creditLimit: true,
        creditScore: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreditCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCreditCheck(
    @common.Param() params: CreditCheckWhereUniqueInput,
    @common.Body() data: CreditCheckUpdateInput
  ): Promise<CreditCheck | null> {
    try {
      return await this.service.updateCreditCheck({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          checkDate: true,
          createdAt: true,
          creditLimit: true,
          creditScore: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreditCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditCheck(
    @common.Param() params: CreditCheckWhereUniqueInput
  ): Promise<CreditCheck | null> {
    try {
      return await this.service.deleteCreditCheck({
        where: params,
        select: {
          checkDate: true,
          createdAt: true,
          creditLimit: true,
          creditScore: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
