/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreditCheck as PrismaCreditCheck,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class CreditCheckServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreditCheckCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creditCheck.count(args);
  }

  async creditChecks<T extends Prisma.CreditCheckFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditCheckFindManyArgs>
  ): Promise<PrismaCreditCheck[]> {
    return this.prisma.creditCheck.findMany<Prisma.CreditCheckFindManyArgs>(
      args
    );
  }
  async creditCheck<T extends Prisma.CreditCheckFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditCheckFindUniqueArgs>
  ): Promise<PrismaCreditCheck | null> {
    return this.prisma.creditCheck.findUnique(args);
  }
  async createCreditCheck<T extends Prisma.CreditCheckCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditCheckCreateArgs>
  ): Promise<PrismaCreditCheck> {
    return this.prisma.creditCheck.create<T>(args);
  }
  async updateCreditCheck<T extends Prisma.CreditCheckUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditCheckUpdateArgs>
  ): Promise<PrismaCreditCheck> {
    return this.prisma.creditCheck.update<T>(args);
  }
  async deleteCreditCheck<T extends Prisma.CreditCheckDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditCheckDeleteArgs>
  ): Promise<PrismaCreditCheck> {
    return this.prisma.creditCheck.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.creditCheck
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
